#include "API_debounce.h"

static debounceState_t state;
static bool_t buttonPressed;

void debounceFSM_init() {
    state = BUTTON_UP;
    buttonPressed = false;
}

void debounceFSM_update() {
    static uint32_t lastDebounceTime = 0;
    static uint32_t currentTime = HAL_GetTick();
    static uint32_t timeDiff = currentTime - lastDebounceTime;

    switch (state) {
        case BUTTON_UP:
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
                state = BUTTON_FALLING;
                lastDebounceTime = currentTime;
            }
            break;
        case BUTTON_FALLING:
            if (timeDiff > DEBOUNCE_DELAY) {
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
                    state = BUTTON_DOWN;
                    buttonPressed = true;
                } else {
                    state = BUTTON_UP;
                }
            }
            break;
        case BUTTON_DOWN:
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
                state = BUTTON_RAISING;
                lastDebounceTime = currentTime;
            }
            break;
        case BUTTON_RAISING:
            if (timeDiff > DEBOUNCE_DELAY) {
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
                    state = BUTTON_UP;
                    buttonPressed = false;
                } else {
                    state = BUTTON_DOWN;
                }
            }
            break;
    }
}

bool_t readKey() {
    if (buttonPressed) {
        buttonPressed = false;
        return true;
    }
    return false;
}

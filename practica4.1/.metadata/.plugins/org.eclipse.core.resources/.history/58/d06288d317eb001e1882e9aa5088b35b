//API_delay.c

#include <API_debounce.h>
#include <stdlib.h>

/* Private function prototypes -----------------------------------------------*/

void delayInit(delay_t *delay, tick_t duration)
{
   if (delay == NULL || duration == 0U) // Fault check
   {
      Error_Handler();
   }

   delay->duration = duration;
   delay->running  = false;
}

bool_t delayRead(delay_t *delay)
{
   bool_t _ret = false;

   if (delay == NULL) // Fault check
   {
      Error_Handler();
   }

   tick_t currentTime = HAL_GetTick();

   if (delay->running)
   {
      if (currentTime - delay->startTime >= delay->duration)
      {
         delay->running = false;
         _ret = true;
      }
   }
   else
   {
      delay->startTime = currentTime;
      delay->running   = true;
   }

   return _ret;
}

void delayWrite(delay_t *delay, tick_t duration)
{
   if (delay == NULL || duration == 0U) // Fault check
   {
      Error_Handler();
   }

   delay->duration = duration;
}

delay_t delay_a;

void functionInit(){
	  /* Initialize BSP Led for LEDS */
	  BSP_LED_Init(LED1);
	  BSP_LED_Init(LED2);
	  BSP_LED_Init(LED3);

	  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
}

void ledsOn(){
	BSP_LED_On(LED1);
	BSP_LED_On(LED2);
	BSP_LED_On(LED3);
}

void ledsOff(){
	BSP_LED_Off(LED1);
	BSP_LED_Off(LED2);
	BSP_LED_Off(LED3);
}

